import { GlFormGroup, GlCollapsibleListbox } from '@gitlab/ui';
import { shallowMount } from '@vue/test-utils';
import VulnerabilityDissmisalReason from 'ee/security_dashboard/components/pipeline/vulnerability_dismissal_reason.vue';
import HelpPopover from '~/vue_shared/components/help_popover.vue';
import { DISMISSAL_REASONS } from 'ee/vulnerabilities/constants';
import { dismissalDescriptions } from 'ee_jest/vulnerabilities/mock_data';

describe('VulnerabilityDissmisalReason', () => {
  let wrapper;

  const createWrapper = (propsData) => {
    wrapper = shallowMount(VulnerabilityDissmisalReason, {
      propsData,
      provide: { dismissalDescriptions },
      stubs: { GlFormGroup },
    });
  };

  const findFormGroup = () => wrapper.findComponent(GlFormGroup);
  const findListBox = () => wrapper.findComponent(GlCollapsibleListbox);
  const findHelpPopover = () => wrapper.findComponent(HelpPopover);

  beforeEach(() => {
    createWrapper();
  });

  it('renders a form group', () => {
    const { dismissAs, fieldRequired } = VulnerabilityDissmisalReason.i18n;
    const formGroup = findFormGroup();

    expect(formGroup.text()).toContain(dismissAs);
    expect(formGroup.attributes('invalidfeedback')).toBe(fieldRequired);
  });

  it('renders a help popover with dismissal descriptions', () => {
    const dismissalDescriptionsMessage = Object.entries(DISMISSAL_REASONS)
      .map(([value, text]) => `${text} ${dismissalDescriptions[value]}`)
      .join('');

    expect(findHelpPopover().text()).toBe(dismissalDescriptionsMessage);
  });

  it('renders a listbox', () => {
    const listBox = findListBox();

    expect(listBox.props('items')).toMatchObject(
      Object.entries(DISMISSAL_REASONS).map(([value, text]) => ({ text, value })),
    );
    expect(listBox.props('category')).toBe('secondary');
  });

  it('renders placeholder toggle text when no value', () => {
    expect(findListBox().props('toggleText')).toBe(VulnerabilityDissmisalReason.i18n.selectAReason);
  });

  it('renders dismissal reason toggle text when value is given', () => {
    createWrapper({ value: 'acceptable_risk' });

    expect(findListBox().props('toggleText')).toBe('Acceptable risk');
  });

  it('passes the value to listbox', () => {
    createWrapper({ value: 'acceptable_risk' });

    expect(findListBox().props('selected')).toBe('acceptable_risk');
  });

  it('passes the dismissal reasons to the listbox', () => {
    const dismissalReasonItems = Object.entries(DISMISSAL_REASONS).map(([value, text]) => ({
      value,
      text,
    }));
    expect(findListBox().props('items')).toMatchObject(dismissalReasonItems);
  });

  describe('invalid state', () => {
    it.each`
      value                | showError | isInvalid | state
      ${null}              | ${false}  | ${false}  | ${'true'}
      ${'acceptable_risk'} | ${false}  | ${false}  | ${'true'}
      ${'acceptable_risk'} | ${true}   | ${false}  | ${'true'}
      ${null}              | ${true}   | ${true}   | ${undefined}
    `(
      'is $isInvalid when value is $value and showError is $showError',
      ({ value, showError, state, isInvalid }) => {
        createWrapper({ value, showError });

        expect(findFormGroup().attributes('state')).toBe(state);
        expect(findListBox().props('variant')).toBe(isInvalid ? 'danger' : 'default');
      },
    );
  });

  it('emits input event when selecting a reason', () => {
    findListBox().vm.$emit('select', 'acceptable_risk');

    expect(wrapper.emitted('input')).toMatchObject([['acceptable_risk']]);
  });
});
